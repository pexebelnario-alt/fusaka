var __defProp = Object.defineProperty,
  __defNormalProp = (a, i, s) =>
    i in a
      ? __defProp(a, i, {
          enumerable: !0,
          configurable: !0,
          writable: !0,
          value: s,
        })
      : (a[i] = s),
  __publicField = (a, i, s) =>
    __defNormalProp(a, typeof i != "symbol" ? i + "" : i, s);
(function () {
  const i = document.createElement("link").relList;
  if (i && i.supports && i.supports("modulepreload")) return;
  for (const n of document.querySelectorAll('link[rel="modulepreload"]')) o(n);
  new MutationObserver((n) => {
    for (const l of n)
      if (l.type === "childList")
        for (const r of l.addedNodes)
          r.tagName === "LINK" && r.rel === "modulepreload" && o(r);
  }).observe(document, { childList: !0, subtree: !0 });
  function s(n) {
    const l = {};
    return (
      n.integrity && (l.integrity = n.integrity),
      n.referrerPolicy && (l.referrerPolicy = n.referrerPolicy),
      n.crossOrigin === "use-credentials"
        ? (l.credentials = "include")
        : n.crossOrigin === "anonymous"
        ? (l.credentials = "omit")
        : (l.credentials = "same-origin"),
      l
    );
  }
  function o(n) {
    if (n.ep) return;
    n.ep = !0;
    const l = s(n);
    fetch(n.href, l);
  }
})();
function getHash() {
  if (location.hash) return location.hash.replace("#", "");
}
let bodyLockStatus = !0,
  bodyLockToggle = (a = 500) => {
    document.documentElement.hasAttribute("data-fls-scrolllock")
      ? bodyUnlock(a)
      : bodyLock(a);
  },
  bodyUnlock = (a = 500) => {
    if (bodyLockStatus) {
      const i = document.querySelectorAll("[data-fls-lp]");
      setTimeout(() => {
        i.forEach((s) => {
          s.style.paddingRight = "";
        }),
          (document.body.style.paddingRight = ""),
          document.documentElement.removeAttribute("data-fls-scrolllock");
      }, a),
        (bodyLockStatus = !1),
        setTimeout(function () {
          bodyLockStatus = !0;
        }, a);
    }
  },
  bodyLock = (a = 500) => {
    if (bodyLockStatus) {
      const i = document.querySelectorAll("[data-fls-lp]"),
        s = window.innerWidth - document.body.offsetWidth + "px";
      i.forEach((o) => {
        o.style.paddingRight = s;
      }),
        (document.body.style.paddingRight = s),
        document.documentElement.setAttribute("data-fls-scrolllock", ""),
        (bodyLockStatus = !1),
        setTimeout(function () {
          bodyLockStatus = !0;
        }, a);
    }
  };
const gotoBlock = (a, i = !1, s = 500, o = 0) => {
  const n = document.querySelector(a);
  if (n) {
    let l = "",
      r = 0;
    if (i) {
      l = "header.header";
      const c = document.querySelector(l);
      c.classList.contains("--header-scroll")
        ? (r = c.offsetHeight)
        : ((c.style.cssText = "transition-duration: 0s;"),
          c.classList.add("--header-scroll"),
          (r = c.offsetHeight),
          c.classList.remove("--header-scroll"),
          setTimeout(() => {
            c.style.cssText = "";
          }, 0));
    }
    document.documentElement.hasAttribute("data-fls-menu-open") &&
      (bodyUnlock(),
      document.documentElement.removeAttribute("data-fls-menu-open"));
    let h = n.getBoundingClientRect().top + scrollY;
    (h = r ? h - r : h),
      (h = o ? h - o : h),
      window.scrollTo({ top: h, behavior: "smooth" });
  }
};
function menuInit() {
  document.addEventListener("click", function (a) {
    bodyLockStatus &&
      a.target.closest("[data-fls-menu]") &&
      (bodyLockToggle(),
      document.documentElement.toggleAttribute("data-fls-menu-open"));
  });
}
document.querySelector("[data-fls-menu]") &&
  window.addEventListener("load", menuInit);
class DynamicAdapt {
  constructor() {
    (this.type = "max"), this.init();
  }
  init() {
    (this.objects = []),
      (this.daClassname = "--dynamic"),
      (this.nodes = [...document.querySelectorAll("[data-fls-dynamic]")]),
      this.nodes.forEach((i) => {
        const o = i.dataset.flsDynamic.trim().split(","),
          n = {};
        (n.element = i),
          (n.parent = i.parentNode),
          (n.destinationParent = (o[3] && i.closest(o[3].trim())) || document),
          o[3] && o[3].trim();
        const l = o[0] ? o[0].trim() : null;
        if (l) {
          const r = n.destinationParent.querySelector(l);
          r && (n.destination = r);
        }
        (n.breakpoint = o[1] ? o[1].trim() : "767.98"),
          (n.place = o[2] ? o[2].trim() : "last"),
          (n.index = this.indexInParent(n.parent, n.element)),
          this.objects.push(n);
      }),
      this.arraySort(this.objects),
      (this.mediaQueries = this.objects
        .map(({ breakpoint: i }) => `(${this.type}-width: ${i / 16}em),${i}`)
        .filter((i, s, o) => o.indexOf(i) === s)),
      this.mediaQueries.forEach((i) => {
        const s = i.split(","),
          o = window.matchMedia(s[0]),
          n = s[1],
          l = this.objects.filter(({ breakpoint: r }) => r === n);
        o.addEventListener("change", () => {
          this.mediaHandler(o, l);
        }),
          this.mediaHandler(o, l);
      });
  }
  mediaHandler(i, s) {
    i.matches
      ? s.forEach((o) => {
          o.destination && this.moveTo(o.place, o.element, o.destination);
        })
      : s.forEach(({ parent: o, element: n, index: l }) => {
          n.classList.contains(this.daClassname) && this.moveBack(o, n, l);
        });
  }
  moveTo(i, s, o) {
    s.classList.add(this.daClassname);
    const n = i === "last" || i === "first" ? i : parseInt(i, 10);
    n === "last" || n >= o.children.length
      ? o.append(s)
      : n === "first"
      ? o.prepend(s)
      : o.children[n].before(s);
  }
  moveBack(i, s, o) {
    s.classList.remove(this.daClassname),
      i.children[o] !== void 0 ? i.children[o].before(s) : i.append(s);
  }
  indexInParent(i, s) {
    return [...i.children].indexOf(s);
  }
  arraySort(i) {
    if (this.type === "min")
      i.sort((s, o) =>
        s.breakpoint === o.breakpoint
          ? s.place === o.place
            ? 0
            : s.place === "first" || o.place === "last"
            ? -1
            : s.place === "last" || o.place === "first"
            ? 1
            : 0
          : s.breakpoint - o.breakpoint
      );
    else {
      i.sort((s, o) =>
        s.breakpoint === o.breakpoint
          ? s.place === o.place
            ? 0
            : s.place === "first" || o.place === "last"
            ? 1
            : s.place === "last" || o.place === "first"
            ? -1
            : 0
          : o.breakpoint - s.breakpoint
      );
      return;
    }
  }
}
document.querySelector("[data-fls-dynamic]") &&
  window.addEventListener("load", () => new DynamicAdapt());
function pageNavigation() {
  document.addEventListener("click", a),
    document.addEventListener("watcherCallback", a);
  function a(i) {
    if (i.type === "click") {
      const s = i.target;
      if (s.closest("[data-fls-scrollto]")) {
        const o = s.closest("[data-fls-scrollto]"),
          n = o.dataset.flsScrollto ? o.dataset.flsScrollto : "",
          l = !!o.hasAttribute("data-fls-scrollto-header"),
          r = o.dataset.flsScrolltoSpeed ? o.dataset.flsScrolltoSpeed : 500,
          h = o.dataset.flsScrolltoTop ? parseInt(o.dataset.flsScrolltoTop) : 0;
        if (window.fullpage) {
          const c = document
              .querySelector(`${n}`)
              .closest("[data-fls-fullpage-section]"),
            d = c ? +c.dataset.flsFullpageId : null;
          d !== null &&
            (window.fullpage.switchingSection(d),
            document.documentElement.hasAttribute("data-fls-menu-open") &&
              (bodyUnlock(),
              document.documentElement.removeAttribute("data-fls-menu-open")));
        } else gotoBlock(n, l, r, h);
        i.preventDefault();
      }
    } else if (i.type === "watcherCallback" && i.detail) {
      const s = i.detail.entry,
        o = s.target;
      if (o.dataset.flsWatcher === "navigator") {
        document.querySelector("[data-fls-scrollto].--navigator-active");
        let n;
        if (o.id && document.querySelector(`[data-fls-scrollto="#${o.id}"]`))
          n = document.querySelector(`[data-fls-scrollto="#${o.id}"]`);
        else if (o.classList.length)
          for (let l = 0; l < o.classList.length; l++) {
            const r = o.classList[l];
            if (document.querySelector(`[data-fls-scrollto=".${r}"]`)) {
              n = document.querySelector(`[data-fls-scrollto=".${r}"]`);
              break;
            }
          }
        s.isIntersecting
          ? n && n.classList.add("--navigator-active")
          : n && n.classList.remove("--navigator-active");
      }
    }
  }
  if (getHash()) {
    let i;
    document.querySelector(`#${getHash()}`)
      ? (i = `#${getHash()}`)
      : document.querySelector(`.${getHash()}`) && (i = `.${getHash()}`),
      i && gotoBlock(i);
  }
}
document.querySelector("[data-fls-scrollto]") &&
  window.addEventListener("load", pageNavigation);
class MousePRLX {
  constructor(i, s = null) {
    let o = { init: !0 };
    if (((this.config = Object.assign(o, i)), this.config.init)) {
      const n = document.querySelectorAll("[data-fls-mouse]");
      n.length && this.paralaxMouseInit(n);
    }
  }
  paralaxMouseInit(i) {
    i.forEach((s) => {
      const o = s.closest("[data-fls-mouse-wrapper]"),
        n = s.dataset.flsMouseCx ? +s.dataset.flsMouseCx : 100,
        l = s.dataset.flsMouseCy ? +s.dataset.flsMouseCy : 100,
        r = s.hasAttribute("data-fls-mouse-dxr") ? -1 : 1,
        h = s.hasAttribute("data-fls-mouse-dyr") ? -1 : 1,
        c = s.dataset.prlxA ? +s.dataset.prlxA : 50;
      let d = 0,
        u = 0,
        m = 0,
        f = 0;
      w(), o ? T(o) : T();
      function w() {
        const E = m - d,
          S = f - u;
        (d = d + (E * c) / 1e3),
          (u = u + (S * c) / 1e3),
          (s.style.cssText = `transform: translate3D(${(r * d) / (n / 10)}%,${
            (h * u) / (l / 10)
          }%,0) rotate(0.02deg);`),
          requestAnimationFrame(w);
      }
      function T(E = window) {
        E.addEventListener("mousemove", function (S) {
          const _ = s.getBoundingClientRect().top + window.scrollY;
          if (_ >= window.scrollY || _ + s.offsetHeight >= window.scrollY) {
            const M = window.innerWidth,
              p = window.innerHeight,
              y = S.clientX - M / 2,
              g = S.clientY - p / 2;
            (m = (y / M) * 100), (f = (g / p) * 100);
          }
        });
      }
    });
  }
}
document.querySelector("[data-fls-mouse]") &&
  window.addEventListener("load", new MousePRLX({}));
const heroSection = document.querySelector(".page__hero"),
  foxImage = document.querySelector(".hero__images-fox "),
  walletImage = document.querySelector(".hero__images-wallet img"),
  heroCoinsImage = document.querySelector(".hero__images-coins"),
  heroFragmentsImage = document.querySelector(".hero__images-fragments");
if (heroSection && foxImage && walletImage) {
  const a = heroSection.getBoundingClientRect().height,
    i = () => {
      const s = window.scrollY;
      if (s >= a) return;
      const o = s / a;
      (foxImage.style.transform = `translate(${-20 * o}%, ${-10 * o}%)`),
        (walletImage.style.transform = `translate(${5 * o}%, ${3 * o}%)`),
        (heroCoinsImage.style.transform = `translate(-50%, ${-50 - 15 * o}%)`),
        (heroCoinsImage.style.transform = `translate(-50%, ${-50 - 15 * o}%)`),
        (heroFragmentsImage.style.transform = `translate(-50%, ${
          -50 - 8 * o
        }%)`);
    };
  window.addEventListener("scroll", i, { passive: !0 });
}
function t(a, i, s) {
  return Math.max(a, Math.min(i, s));
}
class Animate {
  advance(i) {
    var s;
    if (!this.isRunning) return;
    let o = !1;
    if (this.lerp)
      (this.value =
        ((n = this.value),
        (l = this.to),
        (r = 60 * this.lerp),
        (h = i),
        (function (c, d, u) {
          return (1 - u) * c + u * d;
        })(n, l, 1 - Math.exp(-r * h)))),
        Math.round(this.value) === this.to &&
          ((this.value = this.to), (o = !0));
    else {
      this.currentTime += i;
      const c = t(0, this.currentTime / this.duration, 1);
      o = c >= 1;
      const d = o ? 1 : this.easing(c);
      this.value = this.from + (this.to - this.from) * d;
    }
    var n, l, r, h;
    (s = this.onUpdate) == null || s.call(this, this.value, o),
      o && this.stop();
  }
  stop() {
    this.isRunning = !1;
  }
  fromTo(
    i,
    s,
    {
      lerp: o = 0.1,
      duration: n = 1,
      easing: l = (c) => c,
      onStart: r,
      onUpdate: h,
    }
  ) {
    (this.from = this.value = i),
      (this.to = s),
      (this.lerp = o),
      (this.duration = n),
      (this.easing = l),
      (this.currentTime = 0),
      (this.isRunning = !0),
      r?.(),
      (this.onUpdate = h);
  }
}
class Dimensions {
  constructor({
    wrapper: i,
    content: s,
    autoResize: o = !0,
    debounce: n = 250,
  } = {}) {
    __publicField(this, "resize", () => {
      this.onWrapperResize(), this.onContentResize();
    }),
      __publicField(this, "onWrapperResize", () => {
        this.wrapper === window
          ? ((this.width = window.innerWidth),
            (this.height = window.innerHeight))
          : ((this.width = this.wrapper.clientWidth),
            (this.height = this.wrapper.clientHeight));
      }),
      __publicField(this, "onContentResize", () => {
        this.wrapper === window
          ? ((this.scrollHeight = this.content.scrollHeight),
            (this.scrollWidth = this.content.scrollWidth))
          : ((this.scrollHeight = this.wrapper.scrollHeight),
            (this.scrollWidth = this.wrapper.scrollWidth));
      }),
      (this.wrapper = i),
      (this.content = s),
      o &&
        ((this.debouncedResize = (function (l, r) {
          let h;
          return function () {
            let c = arguments,
              d = this;
            clearTimeout(h),
              (h = setTimeout(function () {
                l.apply(d, c);
              }, r));
          };
        })(this.resize, n)),
        this.wrapper === window
          ? window.addEventListener("resize", this.debouncedResize, !1)
          : ((this.wrapperResizeObserver = new ResizeObserver(
              this.debouncedResize
            )),
            this.wrapperResizeObserver.observe(this.wrapper)),
        (this.contentResizeObserver = new ResizeObserver(this.debouncedResize)),
        this.contentResizeObserver.observe(this.content)),
      this.resize();
  }
  destroy() {
    var i, s;
    (i = this.wrapperResizeObserver) == null || i.disconnect(),
      (s = this.contentResizeObserver) == null || s.disconnect(),
      window.removeEventListener("resize", this.debouncedResize, !1);
  }
  get limit() {
    return {
      x: this.scrollWidth - this.width,
      y: this.scrollHeight - this.height,
    };
  }
}
class Emitter {
  constructor() {
    this.events = {};
  }
  emit(i, ...s) {
    let o = this.events[i] || [];
    for (let n = 0, l = o.length; n < l; n++) o[n](...s);
  }
  on(i, s) {
    var o;
    return (
      ((o = this.events[i]) != null && o.push(s)) || (this.events[i] = [s]),
      () => {
        var n;
        this.events[i] =
          (n = this.events[i]) == null ? void 0 : n.filter((l) => s !== l);
      }
    );
  }
  off(i, s) {
    var o;
    this.events[i] =
      (o = this.events[i]) == null ? void 0 : o.filter((n) => s !== n);
  }
  destroy() {
    this.events = {};
  }
}
const e = 100 / 6;
class VirtualScroll {
  constructor(i, { wheelMultiplier: s = 1, touchMultiplier: o = 1 }) {
    __publicField(this, "onTouchStart", (n) => {
      const { clientX: l, clientY: r } = n.targetTouches
        ? n.targetTouches[0]
        : n;
      (this.touchStart.x = l),
        (this.touchStart.y = r),
        (this.lastDelta = { x: 0, y: 0 }),
        this.emitter.emit("scroll", { deltaX: 0, deltaY: 0, event: n });
    }),
      __publicField(this, "onTouchMove", (n) => {
        const { clientX: l, clientY: r } = n.targetTouches
            ? n.targetTouches[0]
            : n,
          h = -(l - this.touchStart.x) * this.touchMultiplier,
          c = -(r - this.touchStart.y) * this.touchMultiplier;
        (this.touchStart.x = l),
          (this.touchStart.y = r),
          (this.lastDelta = { x: h, y: c }),
          this.emitter.emit("scroll", { deltaX: h, deltaY: c, event: n });
      }),
      __publicField(this, "onTouchEnd", (n) => {
        this.emitter.emit("scroll", {
          deltaX: this.lastDelta.x,
          deltaY: this.lastDelta.y,
          event: n,
        });
      }),
      __publicField(this, "onWheel", (n) => {
        let { deltaX: l, deltaY: r, deltaMode: h } = n;
        (l *= h === 1 ? e : h === 2 ? this.windowWidth : 1),
          (r *= h === 1 ? e : h === 2 ? this.windowHeight : 1),
          (l *= this.wheelMultiplier),
          (r *= this.wheelMultiplier),
          this.emitter.emit("scroll", { deltaX: l, deltaY: r, event: n });
      }),
      __publicField(this, "onWindowResize", () => {
        (this.windowWidth = window.innerWidth),
          (this.windowHeight = window.innerHeight);
      }),
      (this.element = i),
      (this.wheelMultiplier = s),
      (this.touchMultiplier = o),
      (this.touchStart = { x: null, y: null }),
      (this.emitter = new Emitter()),
      window.addEventListener("resize", this.onWindowResize, !1),
      this.onWindowResize(),
      this.element.addEventListener("wheel", this.onWheel, { passive: !1 }),
      this.element.addEventListener("touchstart", this.onTouchStart, {
        passive: !1,
      }),
      this.element.addEventListener("touchmove", this.onTouchMove, {
        passive: !1,
      }),
      this.element.addEventListener("touchend", this.onTouchEnd, {
        passive: !1,
      });
  }
  on(i, s) {
    return this.emitter.on(i, s);
  }
  destroy() {
    this.emitter.destroy(),
      window.removeEventListener("resize", this.onWindowResize, !1),
      this.element.removeEventListener("wheel", this.onWheel, { passive: !1 }),
      this.element.removeEventListener("touchstart", this.onTouchStart, {
        passive: !1,
      }),
      this.element.removeEventListener("touchmove", this.onTouchMove, {
        passive: !1,
      }),
      this.element.removeEventListener("touchend", this.onTouchEnd, {
        passive: !1,
      });
  }
}
class Lenis {
  constructor({
    wrapper: i = window,
    content: s = document.documentElement,
    wheelEventsTarget: o = i,
    eventsTarget: n = o,
    smoothWheel: l = !0,
    syncTouch: r = !1,
    syncTouchLerp: h = 0.075,
    touchInertiaMultiplier: c = 35,
    duration: d,
    easing: u = (p) => Math.min(1, 1.001 - Math.pow(2, -10 * p)),
    lerp: m = !d && 0.1,
    infinite: f = !1,
    orientation: w = "vertical",
    gestureOrientation: T = "vertical",
    touchMultiplier: E = 1,
    wheelMultiplier: S = 1,
    autoResize: _ = !0,
    __experimental__naiveDimensions: M = !1,
  } = {}) {
    (this.__isSmooth = !1),
      (this.__isScrolling = !1),
      (this.__isStopped = !1),
      (this.__isLocked = !1),
      (this.onVirtualScroll = ({ deltaX: p, deltaY: y, event: g }) => {
        if (g.ctrlKey) return;
        const L = g.type.includes("touch"),
          H = g.type.includes("wheel");
        if (
          this.options.syncTouch &&
          L &&
          g.type === "touchstart" &&
          !this.isStopped &&
          !this.isLocked
        )
          return void this.reset();
        const W = p === 0 && y === 0,
          N =
            (this.options.gestureOrientation === "vertical" && y === 0) ||
            (this.options.gestureOrientation === "horizontal" && p === 0);
        if (W || N) return;
        let x = g.composedPath();
        if (
          ((x = x.slice(0, x.indexOf(this.rootElement))),
          x.find((v) => {
            var z, k, R, C, A;
            return (
              ((z = v.hasAttribute) === null || z === void 0
                ? void 0
                : z.call(v, "data-lenis-prevent")) ||
              (L &&
                ((k = v.hasAttribute) === null || k === void 0
                  ? void 0
                  : k.call(v, "data-lenis-prevent-touch"))) ||
              (H &&
                ((R = v.hasAttribute) === null || R === void 0
                  ? void 0
                  : R.call(v, "data-lenis-prevent-wheel"))) ||
              (((C = v.classList) === null || C === void 0
                ? void 0
                : C.contains("lenis")) &&
                !(
                  !((A = v.classList) === null || A === void 0) &&
                  A.contains("lenis-stopped")
                ))
            );
          }))
        )
          return;
        if (this.isStopped || this.isLocked) return void g.preventDefault();
        if (
          ((this.isSmooth =
            (this.options.syncTouch && L) || (this.options.smoothWheel && H)),
          !this.isSmooth)
        )
          return (this.isScrolling = !1), void this.animate.stop();
        g.preventDefault();
        let b = y;
        this.options.gestureOrientation === "both"
          ? (b = Math.abs(y) > Math.abs(p) ? y : p)
          : this.options.gestureOrientation === "horizontal" && (b = p);
        const O = L && this.options.syncTouch,
          q = L && g.type === "touchend" && Math.abs(b) > 5;
        q && (b = this.velocity * this.options.touchInertiaMultiplier),
          this.scrollTo(
            this.targetScroll + b,
            Object.assign(
              { programmatic: !1 },
              O
                ? { lerp: q ? this.options.syncTouchLerp : 1 }
                : {
                    lerp: this.options.lerp,
                    duration: this.options.duration,
                    easing: this.options.easing,
                  }
            )
          );
      }),
      (this.onNativeScroll = () => {
        if (!this.__preventNextScrollEvent && !this.isScrolling) {
          const p = this.animatedScroll;
          (this.animatedScroll = this.targetScroll = this.actualScroll),
            (this.velocity = 0),
            (this.direction = Math.sign(this.animatedScroll - p)),
            this.emit();
        }
      }),
      (window.lenisVersion = "1.0.42"),
      (i !== document.documentElement && i !== document.body) || (i = window),
      (this.options = {
        wrapper: i,
        content: s,
        wheelEventsTarget: o,
        eventsTarget: n,
        smoothWheel: l,
        syncTouch: r,
        syncTouchLerp: h,
        touchInertiaMultiplier: c,
        duration: d,
        easing: u,
        lerp: m,
        infinite: f,
        gestureOrientation: T,
        orientation: w,
        touchMultiplier: E,
        wheelMultiplier: S,
        autoResize: _,
        __experimental__naiveDimensions: M,
      }),
      (this.animate = new Animate()),
      (this.emitter = new Emitter()),
      (this.dimensions = new Dimensions({
        wrapper: i,
        content: s,
        autoResize: _,
      })),
      this.toggleClassName("lenis", !0),
      (this.velocity = 0),
      (this.isLocked = !1),
      (this.isStopped = !1),
      (this.isSmooth = r || l),
      (this.isScrolling = !1),
      (this.targetScroll = this.animatedScroll = this.actualScroll),
      this.options.wrapper.addEventListener("scroll", this.onNativeScroll, !1),
      (this.virtualScroll = new VirtualScroll(n, {
        touchMultiplier: E,
        wheelMultiplier: S,
      })),
      this.virtualScroll.on("scroll", this.onVirtualScroll);
  }
  destroy() {
    this.emitter.destroy(),
      this.options.wrapper.removeEventListener(
        "scroll",
        this.onNativeScroll,
        !1
      ),
      this.virtualScroll.destroy(),
      this.dimensions.destroy(),
      this.toggleClassName("lenis", !1),
      this.toggleClassName("lenis-smooth", !1),
      this.toggleClassName("lenis-scrolling", !1),
      this.toggleClassName("lenis-stopped", !1),
      this.toggleClassName("lenis-locked", !1);
  }
  on(i, s) {
    return this.emitter.on(i, s);
  }
  off(i, s) {
    return this.emitter.off(i, s);
  }
  setScroll(i) {
    this.isHorizontal
      ? (this.rootElement.scrollLeft = i)
      : (this.rootElement.scrollTop = i);
  }
  resize() {
    this.dimensions.resize();
  }
  emit() {
    this.emitter.emit("scroll", this);
  }
  reset() {
    (this.isLocked = !1),
      (this.isScrolling = !1),
      (this.animatedScroll = this.targetScroll = this.actualScroll),
      (this.velocity = 0),
      this.animate.stop();
  }
  start() {
    this.isStopped && ((this.isStopped = !1), this.reset());
  }
  stop() {
    this.isStopped ||
      ((this.isStopped = !0), this.animate.stop(), this.reset());
  }
  raf(i) {
    const s = i - (this.time || i);
    (this.time = i), this.animate.advance(0.001 * s);
  }
  scrollTo(
    i,
    {
      offset: s = 0,
      immediate: o = !1,
      lock: n = !1,
      duration: l = this.options.duration,
      easing: r = this.options.easing,
      lerp: h = !l && this.options.lerp,
      onComplete: c,
      force: d = !1,
      programmatic: u = !0,
    } = {}
  ) {
    if ((!this.isStopped && !this.isLocked) || d) {
      if (["top", "left", "start"].includes(i)) i = 0;
      else if (["bottom", "right", "end"].includes(i)) i = this.limit;
      else {
        let m;
        if (
          (typeof i == "string"
            ? (m = document.querySelector(i))
            : i?.nodeType && (m = i),
          m)
        ) {
          if (this.options.wrapper !== window) {
            const w = this.options.wrapper.getBoundingClientRect();
            s -= this.isHorizontal ? w.left : w.top;
          }
          const f = m.getBoundingClientRect();
          i = (this.isHorizontal ? f.left : f.top) + this.animatedScroll;
        }
      }
      if (typeof i == "number") {
        if (
          ((i += s),
          (i = Math.round(i)),
          this.options.infinite
            ? u && (this.targetScroll = this.animatedScroll = this.scroll)
            : (i = t(0, i, this.limit)),
          o)
        )
          return (
            (this.animatedScroll = this.targetScroll = i),
            this.setScroll(this.scroll),
            this.reset(),
            void (c == null || c(this))
          );
        if (!u) {
          if (i === this.targetScroll) return;
          this.targetScroll = i;
        }
        this.animate.fromTo(this.animatedScroll, i, {
          duration: l,
          easing: r,
          lerp: h,
          onStart: () => {
            n && (this.isLocked = !0), (this.isScrolling = !0);
          },
          onUpdate: (m, f) => {
            (this.isScrolling = !0),
              (this.velocity = m - this.animatedScroll),
              (this.direction = Math.sign(this.velocity)),
              (this.animatedScroll = m),
              this.setScroll(this.scroll),
              u && (this.targetScroll = m),
              f || this.emit(),
              f &&
                (this.reset(),
                this.emit(),
                c?.(this),
                (this.__preventNextScrollEvent = !0),
                requestAnimationFrame(() => {
                  delete this.__preventNextScrollEvent;
                }));
          },
        });
      }
    }
  }
  get rootElement() {
    return this.options.wrapper === window
      ? document.documentElement
      : this.options.wrapper;
  }
  get limit() {
    return this.options.__experimental__naiveDimensions
      ? this.isHorizontal
        ? this.rootElement.scrollWidth - this.rootElement.clientWidth
        : this.rootElement.scrollHeight - this.rootElement.clientHeight
      : this.dimensions.limit[this.isHorizontal ? "x" : "y"];
  }
  get isHorizontal() {
    return this.options.orientation === "horizontal";
  }
  get actualScroll() {
    return this.isHorizontal
      ? this.rootElement.scrollLeft
      : this.rootElement.scrollTop;
  }
  get scroll() {
    return this.options.infinite
      ? ((i = this.animatedScroll), (s = this.limit), ((i % s) + s) % s)
      : this.animatedScroll;
    var i, s;
  }
  get progress() {
    return this.limit === 0 ? 1 : this.scroll / this.limit;
  }
  get isSmooth() {
    return this.__isSmooth;
  }
  set isSmooth(i) {
    this.__isSmooth !== i &&
      ((this.__isSmooth = i), this.toggleClassName("lenis-smooth", i));
  }
  get isScrolling() {
    return this.__isScrolling;
  }
  set isScrolling(i) {
    this.__isScrolling !== i &&
      ((this.__isScrolling = i), this.toggleClassName("lenis-scrolling", i));
  }
  get isStopped() {
    return this.__isStopped;
  }
  set isStopped(i) {
    this.__isStopped !== i &&
      ((this.__isStopped = i), this.toggleClassName("lenis-stopped", i));
  }
  get isLocked() {
    return this.__isLocked;
  }
  set isLocked(i) {
    this.__isLocked !== i &&
      ((this.__isLocked = i), this.toggleClassName("lenis-locked", i));
  }
  get className() {
    let i = "lenis";
    return (
      this.isStopped && (i += " lenis-stopped"),
      this.isLocked && (i += " lenis-locked"),
      this.isScrolling && (i += " lenis-scrolling"),
      this.isSmooth && (i += " lenis-smooth"),
      i
    );
  }
  toggleClassName(i, s) {
    this.rootElement.classList.toggle(i, s),
      this.emitter.emit("className change", this);
  }
}
window.addEventListener("load", () => {
  document.documentElement.setAttribute("data-fls-loaded", "");
});
const lenis = new Lenis({
  duration: 0.6,
  easing: (a) => 1 - Math.pow(1 - a, 4),
  smooth: !0,
});
requestAnimationFrame(function a(i) {
  lenis.raf(i), requestAnimationFrame(a);
}),
  document.addEventListener("click", async function (a) {
    if (a.target.closest(".copy-ca-btn"))
      try {
        const i = document.getElementById("tokenValue").textContent.trim();
        await navigator.clipboard.writeText(i),
          alert("Address copied successfully");
      } catch (i) {
        console.error("Error copying address:", i),
          alert("Failed to copy address. Please try again.");
      }
  });
